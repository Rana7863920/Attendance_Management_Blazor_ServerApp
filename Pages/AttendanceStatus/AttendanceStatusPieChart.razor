@page "/attendanceStatusPieChart"
@using BlazorProject.Service.IService
@using BlazorBootstrap

<h3>Attendance Status PieChart</h3>

<PieChart @ref="pieChart" Width="500" Class="mb-5" />

@code {
    [Inject]
    protected IAttendanceStatusService attendanceStatusService { get; set; }
    private PieChart pieChart = default!;
    private PieChartOptions pieChartOptions = default!;
    private ChartData chartData = default!;
    private string[]? backgroundColors;
    protected int count { get; set; } = 0;

    private int datasetsCount = 0;
    private int dataLabelsCount = 0;

    private Random random = new();

    protected override void OnInitialized()
    {
        backgroundColors = ColorBuilder.CategoricalTwelveColors;
        chartData = new ChartData { Labels = GetDefaultDataLabels(2), Datasets = GetDefaultDataSets() };

        pieChartOptions = new();
        pieChartOptions.Responsive = true;
        pieChartOptions.Plugins.Title.Text = "Today Attendance Status";
        pieChartOptions.Plugins.Title.Display = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await pieChart.InitializeAsync(chartData, pieChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private List<IChartDataset> GetDefaultDataSets()
    {
        var datasets = new List<IChartDataset>();

        for (var index = 0; index < 1; index++)
        {
            datasets.Add(GetRandomPieChartDataset());
        }

        return datasets;
    }

    private PieChartDataset GetRandomPieChartDataset()
    {
        if (count == 0)
        {
            count++;
            return new() {  Data = GetRandomData(), BackgroundColor = GetRandomBackgroundColors() };
        }
        else
        {
            return new() { Data = GetRandomData(), BackgroundColor = GetRandomBackgroundColors() };
        }
    }

    private List<double> GetRandomData()
    {
        var data = new List<double>();
        int todayAttendance = attendanceStatusService.GetTodayStatus();
        int totalUsers = attendanceStatusService.TotalUsers();
        data.Add(todayAttendance);
        data.Add(totalUsers - todayAttendance);

        return data;
    }

    private List<string> GetRandomBackgroundColors()
    {
        var colors = new List<string>();
        for (var index = 0; index < dataLabelsCount; index++)
        {
            colors.Add(backgroundColors![index]);
        }

        return colors;
    }

    private List<string> GetDefaultDataLabels(int numberOfLabels)
    {
        var labels = new List<string>();
        for (var index = 0; index < numberOfLabels; index++)
        {
            labels.Add(GetNextDataLabel());
            dataLabelsCount += 1;
        }

        return labels;
    }

    private string GetNextDataLabel()
    {
        if (count == 0)
        {
            count++;
            return $"Punched In Users";
        }
        else
        {
            count = 0;
            return "Not Punched In Users";
        }
    }


    private string GetNextDataBackgrounfColor() => backgroundColors![dataLabelsCount];
}
