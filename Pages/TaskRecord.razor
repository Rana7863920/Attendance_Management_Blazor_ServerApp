@page "/taskRecord"
@using BlazorProject.Models
@using BlazorProject.Service.IService;
@inject NavigationManager _navigationManager;
<div class="row">
    <div class="col-md-9">
        <h3 style="font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;">Task List</h3>
    </div>
    <div class="col-md-3">
        <button type="button" class="form-control btn btn-primary" @onclick="RedirectPage"><span class="oi oi-plus"></span>&nbsp;&nbsp;Add Task</button>
    </div>
</div>
<table class="table table-bordered table-striped table-active m-2 p-2">
    <thead>
        <tr>
            <th>Name</th>
            <th>Project</th>
            <th>Task</th>
            <th>Priority</th>
            <th>Description</th>
            <th>Task Status</th>
            <th>Start Date</th>
            <th>End Date</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var task in TaskList)
        {
            <tr style="font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;">
                <td>@task.ApplicationUser.Name</td>
                <td>@task.Project.Name</td>
                <td>@task.TaskName</td>
                <td>@task.Priority</td>
                <td>@task.Description</td>
                <td>@task.TaskStatuses</td>
                <td>@task.StartDate.ToShortDateString()</td>
                <td>@task.EndDate.ToShortDateString()</td>
                <td>
                    <button type="button" class="btn-primary p-2" @onclick="@(() => EditModalPage(task.Id))"><span class="oi oi-pencil"></span>&nbsp;&nbsp;Edit</button>
                    <button type="button" class="btn-danger p-2" @onclick="@(() => DeleteModalPage(task.Id))"><span class="oi oi-delete"></span>&nbsp;&nbsp;Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>
<TaskModal2 @ref="TaskModalRef" OnCreateTask="HandleCreateTask"/>
<DeleteTaskModal @ref="DeleteTaskModalRef" OnDeleteTask="HandleDeleteTask"/>
<EditTaskModal @ref="EditTaskModalRef" OnUpateTask="HandleUpdateTask"/>


@code {
    [Inject]
    protected ITaskService taskService { get; set; }
    [Inject]
    protected IProjectService projectService { get; set; }
    [Inject]
    protected IUserService userService { get; set; }
    [Parameter]
    public IEnumerable<BlazorProject.Models.Task> TaskList { get; set; }
    protected TaskModal2 TaskModalRef { get; set; }
    [Parameter]
    public Models.Task task { get; set; }
    protected EditTaskModal EditTaskModalRef { get; set; }
    protected DeleteTaskModal DeleteTaskModalRef { get; set; }
    protected int DeleteId { get; set; }


    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        GetTasks();
    }

    public void GetTasks()
    {
        TaskList = taskService.GetTasks();
    }

    private void RedirectPage()
    {
        TaskModalRef.Show();
    }

    private void EditModalPage(int id)
    {
        EditTaskModalRef.Show(id);
    }

    private void DeleteModalPage(int id)
    {
        DeleteTaskModalRef.Show(id);
        DeleteId = id;
    }

    private void HandleUpdateTask(bool isUpdated)
    {
        if(isUpdated)
            StateHasChanged();
    }

    private void HandleCreateTask(IEnumerable<Models.Task> taskList)
    {
        TaskList = taskList;
        StateHasChanged();
    }

    private void HandleDeleteTask (IEnumerable<Models.Task> taskList)
    {
        TaskList = taskList;
        StateHasChanged();
    }

}
