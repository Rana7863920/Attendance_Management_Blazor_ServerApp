@using BlazorProject.Service.IService;
@using BlazorBootstrap
@inherits LeaveType
@{
    var showClass = IsVisible ? "d-block" : "d-none";
}
<div class="modal fade show @showClass" id="taskModal" tabindex="-1" aria-labelledby="taskModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" style="margin-left:34%;" id="taskModalLabel">Add Your Task</h5>
                <button type="button" class="btn-close text-white bg-danger" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body">
                <p>Are you really want to delete this task?</p>
            </div>
            <div class="modal-footer">
                <div class="col-5 m-auto">
                    <button type="submit" class="btn btn-primary form-control bg-danger" value="Delete" @onclick="(() => DeleteTask(ToastType.Danger))">Delete</button>
                </div>
                <div class="col-5 m-auto">
                    <button type="button" class="btn btn-secondary form-control" @onclick="CloseModal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
</div>
<Toasts class="p-3" Messages="messages" Delay="6000" Placement="ToastsPlacement.TopRight" />

@code {
    [Inject]
    protected ILeaveTypeService leaveTypeService { get; set; }
    protected bool IsVisible { get; set; } = false;
    protected int LeaveTypeId { get; set; }
    protected Models.LeaveType LeaveType { get; set; } = new Models.LeaveType();
    protected IEnumerable<Models.LeaveType> LeaveTypeList { get; set; }
    [Parameter]
    public EventCallback<IEnumerable<Models.LeaveType>> OnDeleteLeaveType { get; set; }
    List<ToastMessage> messages = new List<ToastMessage>();
    private ToastMessage CreateToastMessage(ToastType toastType)
    => new ToastMessage
        {
            Type = toastType,
            Message = $"Leave Type Deleted Successfully",
            AutoHide = true,
        };

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
    }

    public void Show(int id)
    {
        IsVisible = true;
        LeaveTypeId = id;
        StateHasChanged();
    }

    public void CloseModal()
    {
        IsVisible = false;
    }

    new public void GetLeaveTypes()
    {
        LeaveTypeList = leaveTypeService.GetLeaveTypes();
    }

    public void DeleteTask(ToastType toastType)
    {
        bool isDeleted = leaveTypeService.DeleteLeaveType(LeaveTypeId);
        if (isDeleted)
        {
            messages.Add(CreateToastMessage(toastType));
            IsVisible = false;
            DelteLeaveTypeHandler();
        }
    }

    public async System.Threading.Tasks.Task DelteLeaveTypeHandler()
    {
        GetLeaveTypes();
        await OnDeleteLeaveType.InvokeAsync(LeaveTypeList);
    }
}
