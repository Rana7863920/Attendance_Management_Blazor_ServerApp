@page "/leaveManagement"
@using BlazorProject.Service.IService
<AuthorizeView Roles="Admin">
    <div class="row">
        <div class="col-md-9">
            <h3 style="font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;">Leave Management</h3>
        </div>
        <div class="col-md-3">
            <button type="button" class="form-control btn btn-primary" @onclick="CreateLeaveManagementModalPage"><span class="oi oi-plus"></span>&nbsp;&nbsp;Add Leaves</button>
        </div>
    </div>
    <table class="table table-bordered table-striped table-active m-2 p-2">
        <thead>
            <tr>
                <th>UserName</th>
                <th>Leave Type</th>
                <th>Granted</th>
                <th>Used</th>
                <th>Balance</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var leave in LeaveManagementList)
            {
                <tr style="font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;">
                    <td>@leave.ApplicationUser.Name</td>
                    <td>@leave.LeaveType.Name</td>
                    <td>@leave.Granted</td>
                    <td>@leave.Used</td>
                    <td>@leave.Balance</td>
                    <td>
                        <button type="button" class="btn-primary p-2" @onclick="(() => EditLeaveManagementModalPage(leave.ApplicationUserId, leave.LeaveTypeId))"><span class="oi oi-pencil"></span>&nbsp;&nbsp;Edit</button>
                        <button type="button" class="btn-danger p-2" @onclick="(() => DeleteLeaveManagementModalPage(leave.ApplicationUserId, leave.LeaveTypeId))"><span class="oi oi-delete"></span>&nbsp;&nbsp;Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <CreateLeaveManagementModal @ref="CreateLeaveManagementModalRef" OnCreateLeaveManagement="HandleCreateLeaveManagement" />
    <EditLeaveManagementModal @ref="EditLeaveManagementModalRef" OnUpdateLeaveManagement="HandleUpdateLeaveManagement" />
    <DeleteLeaveManagementModal @ref="DeleteLeaveManagementModalRef" OnDeleteLeaveManagement="HandleDeleteLeaveManagement" />
</AuthorizeView>
@code {
    [Inject]
    protected ILeaveBalanceService leaveBalanceService { get; set; }
    public IEnumerable<Models.LeaveBalance> LeaveManagementList { get; set; }
    public CreateLeaveManagementModal CreateLeaveManagementModalRef { get; set; }
    public EditLeaveManagementModal EditLeaveManagementModalRef { get; set; }
    public DeleteLeaveManagementModal DeleteLeaveManagementModalRef { get; set; }

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        GetLeaveManagementList();
    }

    public void GetLeaveManagementList()
    {
        LeaveManagementList = leaveBalanceService.GetLeaveManagementList();
    }

    private void CreateLeaveManagementModalPage()
    {
        CreateLeaveManagementModalRef.Show();
    }

    private void EditLeaveManagementModalPage(string applicationUserId, int leaveTypeId)
    {
        EditLeaveManagementModalRef.Show(applicationUserId, leaveTypeId);
    }

    private void DeleteLeaveManagementModalPage(string applicationUserId, int leaveTypeId)
    {
        DeleteLeaveManagementModalRef.Show(applicationUserId, leaveTypeId);
    }

    private void HandleCreateLeaveManagement(IEnumerable<Models.LeaveBalance> leaveManagementList)
    {
        LeaveManagementList = leaveManagementList;
        StateHasChanged();
    }

    private void HandleUpdateLeaveManagement(bool isUpdated)
    {
        if (isUpdated)
            StateHasChanged();
    }

    private void HandleDeleteLeaveManagement(IEnumerable<Models.LeaveBalance> leaveManagementList)
    {
        LeaveManagementList = leaveManagementList;
        StateHasChanged();
    }
}
