@using BlazorProject.Models;
@using BlazorProject.Service.IService;
<div class="job-status m-3 dropzone @dropClass" style="border:1px solid black;width:25%;background-color:lightgrey;overflow:hidden"
     ondragover="event.preventDefault();"
     ondragstart="event.dataTransfer.setData('', event.target.id);"
     @ondrop="HandleDrop"
     @ondragenter="HandleDragEnter"
     @ondragleave="HandleDragLeave">
    @if (ListStatus.Equals(TaskStatuses.Backlog)){
        BgColor = "red";
        BgColor2 = "orangered";
    }
    else if (ListStatus.Equals(TaskStatuses.Development)){
        BgColor = "lightseagreen";
        BgColor2 = "lightseagreen";
    }
    else if (ListStatus.Equals(TaskStatuses.Testing)){
        BgColor = "darkorange";
        BgColor2 = "orange";
    }
    else{
        BgColor = "Green";
        BgColor2 = "lightgreen";
    }
    <h3 class="text-center" style="font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;background-color:@BgColor;">@ListStatus</h3>
    <ul style="list-style:none;margin-left:-12%;background-color:@BgColor2">
        @foreach (var task in Tasks)
        {
            <Task TaskModel="task" />
        }
    </ul>
</div>

@code {
    [Inject]
    protected ITaskService taskService { get; set; }
    [CascadingParameter]
    TaskContainer Container { get; set; }
    [Parameter]
    public TaskStatuses ListStatus { get; set; }
    [Parameter]
    public TaskStatuses[] AllowedStatuses { get; set; }
    List<Models.Task> Tasks = new List<Models.Task>();
    protected string BgColor { get; set; }
    protected string BgColor2 { get; set; }
    string dropClass = "";
    protected override void OnParametersSet()
    {
        Tasks.Clear();
        Tasks.AddRange(Container.Tasks.Where(x => x.TaskStatuses == ListStatus));
    }
    private void HandleDragEnter()
    {
        if (ListStatus == Container.Payload.TaskStatuses) return;
        if (AllowedStatuses != null && !AllowedStatuses.Contains(Container.Payload.TaskStatuses))
        {
            dropClass = "no-drop";
        }
        else
        {
            dropClass = "can-drop";
        }
    }
    private void HandleDragLeave()
    {
        dropClass = "";
    }
    private async System.Threading.Tasks.Task HandleDrop()
    {
        dropClass = "";
        if (AllowedStatuses != null && !AllowedStatuses.Contains(Container.Payload.TaskStatuses)) return;
        await Container.UpdateJobAsync(ListStatus);
        var task = taskService.GetTaskById(Container.Payload.Id);
        task.TaskStatuses = ListStatus;
        taskService.UpdateTask(task);
    }
}
