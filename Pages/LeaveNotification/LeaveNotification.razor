@page "/leaveNotification"
@using BlazorProject.Service.IService
@using BlazorBootstrap
<div class="row">
    <div class="col-md-9">
        <h3 style="font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;">Leave Notification</h3>
    </div>
</div>
<table class="table table-bordered table-striped table-active m-2 p-2">
    <thead>
        <tr>
            <th>User Name</th>
            <th>Leave Type</th>
            <th>Reason</th>
            <th>Start Date</th>
            <th>End Date</th>
            <th>No of Days</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var leave in LeaveList)
        {
            <tr style="font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;">
                <td>@leave.LeaveBalance.ApplicationUser.Name</td>
                <td>@leave.LeaveBalance.LeaveType.Name</td>
                <td>@leave.Reason</td>
                <td>@leave.StartDate.ToShortDateString()</td>
                <td>@leave.EndDate.ToShortDateString()</td>
                <td>@NoOfDays(leave)</td>
                <td>
                    <button type="button" class="btn-success p-2" @onclick="(() => LeaveApproved(leave))">Approved</button>
                    <button type="button" class="btn-danger p-2" @onclick="(() => LeaveRejected(leave))">Rejected</button>
                </td>
            </tr>
        }
    </tbody>
</table>
<Toasts class="p-3" Messages="messages" Delay="6000" Placement="ToastsPlacement.TopRight" />
@code {
    [Inject]
    protected ILeaveService leaveService { get; set; }
    protected IEnumerable<Models.Leave> LeaveList { get; set; }
    List<ToastMessage> messages = new List<ToastMessage>();
    private ToastMessage CreateToastMessage(ToastType toastType, string message)
    => new ToastMessage
        {
            Type = toastType,
            Message = message,
            AutoHide = true,
        };

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        GetLeaveList();
    }

    public void GetLeaveList()
    {
        LeaveList = leaveService.GetLeaves();
    }

    public int NoOfDays(Models.Leave leave)
    {
        TimeSpan days = leave.EndDate - leave.StartDate;
        if (leave.StartDate.ToShortDateString() == leave.EndDate.ToShortDateString())
            return 1;
        else if (days.Days == 1)
            return 2;
        else
        {
            return days.Days + 2;
        }
    }

    public void LeaveRejected(Models.Leave leave)
    {
        leave.Status = "Rejected";
        bool IsRejected = leaveService.UpdateLeave(leave);
        if (IsRejected)
        {
            messages.Add(CreateToastMessage(ToastType.Danger, "Leave Rejected!!!"));
        }
    }

    public void LeaveApproved(Models.Leave leave)
    {
        bool IsAprooved = leaveService.LeaveApproved(leave);
        if (IsAprooved)
        {
            messages.Add(CreateToastMessage(ToastType.Success, "Leave Approved!!!"));
        }
    }
}
