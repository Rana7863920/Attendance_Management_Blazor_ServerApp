@page "/leaveType"
@using BlazorProject.Service.IService;
<div class="row">
    <div class="col-md-9">
        <h3 style="font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;">LeaveType List</h3>
    </div>
    <div class="col-md-3">
        <button type="button" class="form-control btn btn-primary" @onclick="CreateLeaveTypeModalPage"><span class="oi oi-plus"></span>&nbsp;&nbsp;Add LeaveType</button>
    </div>
</div>
<table class="table table-bordered table-striped table-active m-2 p-2">
    <thead>
        <tr>
            <th>Name</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var leaveType in LeaveTypeList)
        {
            <tr style="font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;">
                <td>@leaveType.Name</td>
                <td>
                    <button type="button" class="btn-primary p-2" @onclick="(() => EditLeaveTypeModalPage(leaveType.Id))"><span class="oi oi-pencil"></span>&nbsp;&nbsp;Edit</button>
                    <button type="button" class="btn-danger p-2" @onclick="(() => DeleteLeaveTypeModalPage(leaveType.Id))"><span class="oi oi-delete"></span>&nbsp;&nbsp;Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>
<CreateLeaveTypeModal @ref="CreateLeaveModalRef" OnCreateLeaveType="HandleCreateLeaveType"/>
<EditLeaveTypeModal @ref="EditLeaveModalRef" OnUpdateLeaveType="HandleUpdateLeaveType" />
<DeleteLeaveTypeModal @ref="DeleteLeaveModalRef" OnDeleteLeaveType="HandleDeleteLeaveType" />

@code {
    [Inject]
    protected ILeaveTypeService leaveTypeService { get; set; }
    protected IEnumerable<Models.LeaveType> LeaveTypeList { get; set; }
    protected CreateLeaveTypeModal CreateLeaveModalRef { get; set; }
    protected EditLeaveTypeModal EditLeaveModalRef { get; set; }
    protected DeleteLeaveTypeModal DeleteLeaveModalRef { get; set; }


    protected override async Task OnInitializedAsync()
    {
        GetLeaveTypes();
    }

    public void GetLeaveTypes()
    {
        LeaveTypeList = leaveTypeService.GetLeaveTypes();
    }

    private void CreateLeaveTypeModalPage()
    {
        CreateLeaveModalRef.Show();
    }

    private void EditLeaveTypeModalPage(int id)
    {
        EditLeaveModalRef.Show(id);
    }

    private void DeleteLeaveTypeModalPage(int id)
    {
        DeleteLeaveModalRef.Show(id);
    }

    private void HandleCreateLeaveType(IEnumerable<Models.LeaveType> leaveTypeList)
    {
        LeaveTypeList = leaveTypeList;
        StateHasChanged();
    }

    private void HandleUpdateLeaveType(bool isUpdated)
    {
        if (isUpdated)
            StateHasChanged();
    }

    private void HandleDeleteLeaveType(IEnumerable<Models.LeaveType> leaveTypeList)
    {
        LeaveTypeList = leaveTypeList;
        StateHasChanged();
    }
}
